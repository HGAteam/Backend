openapi: 3.0.3
info:
  title: 'Backend API Documentation'
  description: 'Documentación de la API que consume SWAPI'
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
tags:
  -
    name: 'API Autenticación'
    description: ''
  -
    name: 'API | GET People'
    description: ''
  -
    name: 'API | GET Planets'
    description: ''
  -
    name: 'API | GET Vehicles'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'Puedes obtener tu token iniciando sesión en el endpoint de autenticación.'
security:
  -
    default: []
paths:
  /api/login:
    post:
      summary: "Iniciar sesión y obtener un token de acceso\n\nEste endpoint permite iniciar sesión con un usuario registrado.  \nPara acceder a los recursos protegidos de la API, debes usar el token generado en el encabezado `Authorization`.  \n\n**IMPORTANTE:**  \n- Si no tienes una cuenta, puedes registrarte utilizando el endpoint de registro.  \n- También puedes solicitar un usuario de prueba.  \n- Una vez autenticado, el token obtenido debe ser enviado en todas las solicitudes protegidas."
      operationId: iniciarSesinYObtenerUnTokenDeAccesoEsteEndpointPermiteIniciarSesinConUnUsuarioRegistradoParaAccederALosRecursosProtegidosDeLaAPIDebesUsarElTokenGeneradoEnElEncabezadoAuthorizationIMPORTANTESiNoTienesUnaCuentaPuedesRegistrarteUtilizandoElEndpointDeRegistroTambinPuedesSolicitarUnUsuarioDePruebaUnaVezAutenticadoElTokenObtenidoDebeSerEnviadoEnTodasLasSolicitudesProtegidas
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                  token_type: Bearer
                  expires_in: 3600
                properties:
                  access_token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 3600
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Credenciales inválidas.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Credenciales inválidas.'
      tags:
        - 'API Autenticación'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'El correo electrónico del usuario.'
                  example: usuario@ejemplo.com
                  nullable: false
                password:
                  type: string
                  description: 'La contraseña del usuario.'
                  example: secret
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/register:
    post:
      summary: "Registrar un nuevo usuario\n\nEste endpoint permite registrar un nuevo usuario en la API. No se necesita autenticación para esta solicitud."
      operationId: registrarUnNuevoUsuarioEsteEndpointPermiteRegistrarUnNuevoUsuarioEnLaAPINoSeNecesitaAutenticacinParaEstaSolicitud
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Usuario registrado exitosamente.'
                  user:
                    id: 1
                    name: 'Juan Pérez'
                    email: usuario@ejemplo.com
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Usuario registrado exitosamente.'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Juan Pérez'
                      email:
                        type: string
                        example: usuario@ejemplo.com
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error en la validación.'
                  errors:
                    email:
                      - 'El campo email es obligatorio.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error en la validación.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'El campo email es obligatorio.'
                        items:
                          type: string
      tags:
        - 'API Autenticación'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'El nombre del usuario.'
                  example: 'Juan Pérez'
                  nullable: false
                email:
                  type: string
                  description: 'El correo electrónico del usuario.'
                  example: usuario@ejemplo.com
                  nullable: false
                password:
                  type: string
                  description: 'La contraseña del usuario.'
                  example: secret
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Confirmación de la contraseña.'
                  example: secret
                  nullable: false
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/logout:
    post:
      summary: "Cerrar sesión del usuario autenticado\n\nEste endpoint permite cerrar la sesión de un usuario autenticado.  \nSe debe enviar un **token válido** en el encabezado `Authorization`."
      operationId: cerrarSesinDelUsuarioAutenticadoEsteEndpointPermiteCerrarLaSesinDeUnUsuarioAutenticadoSeDebeEnviarUntokenVlidoEnElEncabezadoAuthorization
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Sesión cerrada exitosamente.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Sesión cerrada exitosamente.'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'No se pudo cerrar la sesión.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'No se pudo cerrar la sesión.'
      tags:
        - 'API Autenticación'
      security: []
  /api/is-authenticated:
    get:
      summary: "Verificar si el usuario está autenticado\n\nEste endpoint permite verificar si el usuario está autenticado.  \nSe debe enviar un **token válido** en el encabezado `Authorization`."
      operationId: verificarSiElUsuarioEstAutenticadoEsteEndpointPermiteVerificarSiElUsuarioEstAutenticadoSeDebeEnviarUntokenVlidoEnElEncabezadoAuthorization
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Usuario autenticado.'
                  user:
                    id: 1
                    name: 'Juan Pérez'
                    email: usuario@ejemplo.com
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Usuario autenticado.'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Juan Pérez'
                      email:
                        type: string
                        example: usuario@ejemplo.com
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Usuario no autenticado.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Usuario no autenticado.'
      tags:
        - 'API Autenticación'
      security: []
  /api/people:
    get:
      summary: "Obtener una lista de personas\n\nEste endpoint devuelve una lista paginada de personajes de Star Wars."
      operationId: obtenerUnaListaDePersonasEsteEndpointDevuelveUnaListaPaginadaDePersonajesDeStarWars
      description: ''
      parameters:
        -
          in: query
          name: limit
          description: 'Número de registros por página. Default: 10.'
          example: 5
          required: false
          schema:
            type: integer
            description: 'Número de registros por página. Default: 10.'
            example: 5
            nullable: false
        -
          in: query
          name: offset
          description: 'Número de registros a omitir. Default: 0.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Número de registros a omitir. Default: 0.'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Operación exitosa'
                  data:
                    -
                      id: 1
                      name: 'Luke Skywalker'
                      height: '172'
                      mass: '77'
                      hair_color: blond
                      skin_color: fair
                      eye_color: blue
                      birth_year: 19BBY
                      gender: male
                  pagination:
                    total: 82
                    limit: 10
                    offset: 0
                    next: '/api/people?limit=10&offset=10'
                    previous: null
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Operación exitosa'
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Luke Skywalker'
                        height: '172'
                        mass: '77'
                        hair_color: blond
                        skin_color: fair
                        eye_color: blue
                        birth_year: 19BBY
                        gender: male
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Luke Skywalker'
                        height:
                          type: string
                          example: '172'
                        mass:
                          type: string
                          example: '77'
                        hair_color:
                          type: string
                          example: blond
                        skin_color:
                          type: string
                          example: fair
                        eye_color:
                          type: string
                          example: blue
                        birth_year:
                          type: string
                          example: 19BBY
                        gender:
                          type: string
                          example: male
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 82
                      limit:
                        type: integer
                        example: 10
                      offset:
                        type: integer
                        example: 0
                      next:
                        type: string
                        example: '/api/people?limit=10&offset=10'
                      previous:
                        type: string
                        example: null
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'No se encontraron personas.'
                  errors: []
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'No se encontraron personas.'
                  errors:
                    type: array
                    example: []
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error interno del servidor.'
                  error: 'Detalles del error'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error interno del servidor.'
                  error:
                    type: string
                    example: 'Detalles del error'
      tags:
        - 'API | GET People'
      security: []
  '/api/people/{id}':
    get:
      summary: "Obtener los detalles de una persona específica\n\nEste endpoint devuelve la información detallada de una persona por su ID."
      operationId: obtenerLosDetallesDeUnaPersonaEspecficaEsteEndpointDevuelveLaInformacinDetalladaDeUnaPersonaPorSuID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Operación exitosa'
                  data:
                    id: 1
                    name: 'Luke Skywalker'
                    height: '172'
                    mass: '77'
                    hair_color: blond
                    skin_color: fair
                    eye_color: blue
                    birth_year: 19BBY
                    gender: male
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Operación exitosa'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Luke Skywalker'
                      height:
                        type: string
                        example: '172'
                      mass:
                        type: string
                        example: '77'
                      hair_color:
                        type: string
                        example: blond
                      skin_color:
                        type: string
                        example: fair
                      eye_color:
                        type: string
                        example: blue
                      birth_year:
                        type: string
                        example: 19BBY
                      gender:
                        type: string
                        example: male
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Persona no encontrada.'
                  errors: []
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Persona no encontrada.'
                  errors:
                    type: array
                    example: []
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error interno del servidor.'
                  error: 'Detalles del error'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error interno del servidor.'
                  error:
                    type: string
                    example: 'Detalles del error'
      tags:
        - 'API | GET People'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'El ID de la persona.'
        example: 1
        required: true
        schema:
          type: integer
  /api/planets:
    get:
      summary: "Obtener una lista de planetas\n\nEste endpoint devuelve una lista paginada de planetas del universo de Star Wars."
      operationId: obtenerUnaListaDePlanetasEsteEndpointDevuelveUnaListaPaginadaDePlanetasDelUniversoDeStarWars
      description: ''
      parameters:
        -
          in: query
          name: limit
          description: 'Número de registros por página. Default: 10.'
          example: 5
          required: false
          schema:
            type: integer
            description: 'Número de registros por página. Default: 10.'
            example: 5
            nullable: false
        -
          in: query
          name: offset
          description: 'Número de registros a omitir. Default: 0.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Número de registros a omitir. Default: 0.'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Operación exitosa'
                  data:
                    -
                      id: 1
                      name: Tatooine
                      rotation_period: '23'
                      orbital_period: '304'
                      diameter: '10465'
                      climate: arid
                      gravity: '1 standard'
                      terrain: desert
                      surface_water: '1'
                      population: '200000'
                  pagination:
                    total: 60
                    limit: 10
                    offset: 0
                    next: '/api/planets?limit=10&offset=10'
                    previous: null
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Operación exitosa'
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: Tatooine
                        rotation_period: '23'
                        orbital_period: '304'
                        diameter: '10465'
                        climate: arid
                        gravity: '1 standard'
                        terrain: desert
                        surface_water: '1'
                        population: '200000'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Tatooine
                        rotation_period:
                          type: string
                          example: '23'
                        orbital_period:
                          type: string
                          example: '304'
                        diameter:
                          type: string
                          example: '10465'
                        climate:
                          type: string
                          example: arid
                        gravity:
                          type: string
                          example: '1 standard'
                        terrain:
                          type: string
                          example: desert
                        surface_water:
                          type: string
                          example: '1'
                        population:
                          type: string
                          example: '200000'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 60
                      limit:
                        type: integer
                        example: 10
                      offset:
                        type: integer
                        example: 0
                      next:
                        type: string
                        example: '/api/planets?limit=10&offset=10'
                      previous:
                        type: string
                        example: null
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'No se encontraron planetas.'
                  errors: []
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'No se encontraron planetas.'
                  errors:
                    type: array
                    example: []
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error interno del servidor.'
                  error: 'Detalles del error'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error interno del servidor.'
                  error:
                    type: string
                    example: 'Detalles del error'
      tags:
        - 'API | GET Planets'
      security: []
  '/api/planets/{id}':
    get:
      summary: "Obtener los detalles de un planeta específico\n\nEste endpoint devuelve la información detallada de un planeta por su ID."
      operationId: obtenerLosDetallesDeUnPlanetaEspecficoEsteEndpointDevuelveLaInformacinDetalladaDeUnPlanetaPorSuID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Operación exitosa'
                  data:
                    id: 1
                    name: Tatooine
                    rotation_period: '23'
                    orbital_period: '304'
                    diameter: '10465'
                    climate: arid
                    gravity: '1 standard'
                    terrain: desert
                    surface_water: '1'
                    population: '200000'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Operación exitosa'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Tatooine
                      rotation_period:
                        type: string
                        example: '23'
                      orbital_period:
                        type: string
                        example: '304'
                      diameter:
                        type: string
                        example: '10465'
                      climate:
                        type: string
                        example: arid
                      gravity:
                        type: string
                        example: '1 standard'
                      terrain:
                        type: string
                        example: desert
                      surface_water:
                        type: string
                        example: '1'
                      population:
                        type: string
                        example: '200000'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Planeta no encontrado.'
                  errors: []
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Planeta no encontrado.'
                  errors:
                    type: array
                    example: []
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error interno del servidor.'
                  error: 'Detalles del error'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error interno del servidor.'
                  error:
                    type: string
                    example: 'Detalles del error'
      tags:
        - 'API | GET Planets'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'El ID del planeta.'
        example: 1
        required: true
        schema:
          type: integer
  /api/vehicles:
    get:
      summary: "Obtener una lista de vehículos\n\nEste endpoint devuelve una lista paginada de vehículos de Star Wars."
      operationId: obtenerUnaListaDeVehculosEsteEndpointDevuelveUnaListaPaginadaDeVehculosDeStarWars
      description: ''
      parameters:
        -
          in: query
          name: limit
          description: 'Número de registros por página. Default: 10.'
          example: 5
          required: false
          schema:
            type: integer
            description: 'Número de registros por página. Default: 10.'
            example: 5
            nullable: false
        -
          in: query
          name: offset
          description: 'Número de registros a omitir. Default: 0.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Número de registros a omitir. Default: 0.'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Operación exitosa'
                  data:
                    -
                      id: 1
                      name: 'Speeder Bike'
                      model: '74-Z speeder bike'
                      manufacturer: 'Aratech Repulsorlift Company'
                      cost_in_credits: '5000'
                      length: '3.4'
                      max_atmosphering_speed: '200'
                      crew: '1'
                      passengers: '0'
                      cargo_capacity: '4'
                      consumables: None
                      vehicle_class: 'speeder bike'
                  pagination:
                    total: 82
                    limit: 10
                    offset: 0
                    next: '/api/vehicles?limit=10&offset=10'
                    previous: null
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Operación exitosa'
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Speeder Bike'
                        model: '74-Z speeder bike'
                        manufacturer: 'Aratech Repulsorlift Company'
                        cost_in_credits: '5000'
                        length: '3.4'
                        max_atmosphering_speed: '200'
                        crew: '1'
                        passengers: '0'
                        cargo_capacity: '4'
                        consumables: None
                        vehicle_class: 'speeder bike'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Speeder Bike'
                        model:
                          type: string
                          example: '74-Z speeder bike'
                        manufacturer:
                          type: string
                          example: 'Aratech Repulsorlift Company'
                        cost_in_credits:
                          type: string
                          example: '5000'
                        length:
                          type: string
                          example: '3.4'
                        max_atmosphering_speed:
                          type: string
                          example: '200'
                        crew:
                          type: string
                          example: '1'
                        passengers:
                          type: string
                          example: '0'
                        cargo_capacity:
                          type: string
                          example: '4'
                        consumables:
                          type: string
                          example: None
                        vehicle_class:
                          type: string
                          example: 'speeder bike'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 82
                      limit:
                        type: integer
                        example: 10
                      offset:
                        type: integer
                        example: 0
                      next:
                        type: string
                        example: '/api/vehicles?limit=10&offset=10'
                      previous:
                        type: string
                        example: null
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'No se encontraron vehículos.'
                  errors: []
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'No se encontraron vehículos.'
                  errors:
                    type: array
                    example: []
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error interno del servidor.'
                  error: 'Detalles del error'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error interno del servidor.'
                  error:
                    type: string
                    example: 'Detalles del error'
      tags:
        - 'API | GET Vehicles'
      security: []
  '/api/vehicles/{id}':
    get:
      summary: "Obtener los detalles de un vehículo específico\n\nEste endpoint devuelve la información detallada de un vehículo por su ID."
      operationId: obtenerLosDetallesDeUnVehculoEspecficoEsteEndpointDevuelveLaInformacinDetalladaDeUnVehculoPorSuID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Operación exitosa'
                  data:
                    id: 1
                    name: 'Speeder Bike'
                    model: '74-Z speeder bike'
                    manufacturer: 'Aratech Repulsorlift Company'
                    cost_in_credits: '5000'
                    length: '3.4'
                    max_atmosphering_speed: '200'
                    crew: '1'
                    passengers: '0'
                    cargo_capacity: '4'
                    consumables: None
                    vehicle_class: 'speeder bike'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Operación exitosa'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Speeder Bike'
                      model:
                        type: string
                        example: '74-Z speeder bike'
                      manufacturer:
                        type: string
                        example: 'Aratech Repulsorlift Company'
                      cost_in_credits:
                        type: string
                        example: '5000'
                      length:
                        type: string
                        example: '3.4'
                      max_atmosphering_speed:
                        type: string
                        example: '200'
                      crew:
                        type: string
                        example: '1'
                      passengers:
                        type: string
                        example: '0'
                      cargo_capacity:
                        type: string
                        example: '4'
                      consumables:
                        type: string
                        example: None
                      vehicle_class:
                        type: string
                        example: 'speeder bike'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Vehículo no encontrado.'
                  errors: []
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Vehículo no encontrado.'
                  errors:
                    type: array
                    example: []
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error interno del servidor.'
                  error: 'Detalles del error'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error interno del servidor.'
                  error:
                    type: string
                    example: 'Detalles del error'
      tags:
        - 'API | GET Vehicles'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'El ID del vehículo.'
        example: 1
        required: true
        schema:
          type: integer
